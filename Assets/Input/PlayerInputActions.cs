//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""All"",
            ""id"": ""0b743467-d1fe-4221-9b89-039eeaf463bb"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""67e90970-f792-4505-9853-0f2fbb229af3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ccfe2312-f3e6-4655-90af-6fea7b7602cf"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerWalking"",
            ""id"": ""d03916ab-8bca-4e1d-b0c5-2392b4dc05d2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6e76317b-f5cb-4b92-b0d8-d7e5a43d7393"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""21d33bf8-8f42-49d3-98e9-dbe260e7903b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""6a99ab8b-a478-4638-8b28-c9da480ce756"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SmartphoneToggle"",
                    ""type"": ""Button"",
                    ""id"": ""2313d576-ef07-4496-8ef9-e49ebd06663b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GuidebookToggle"",
                    ""type"": ""Button"",
                    ""id"": ""6734d569-cc08-49fb-b98a-ca945a1927fb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""0d8dd9dd-adae-4da3-b52f-92800050a51d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ba082886-6d28-467e-98e0-af133293cefa"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7ddc2eb2-3a9c-46cb-95d0-5504606b1f0f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""84cca616-82aa-4599-aeea-ebc94dfa4ca0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""12db8ae4-3d1f-42fb-acf1-fbf4eea48a14"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""47ee5e07-b34b-4595-9c22-4ced412dc79d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac1a60d1-b59b-4a99-b133-410f5fdc16c1"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7222dc0c-713d-49e7-8321-1f4757b7fb32"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SmartphoneToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e01cbf8-0ce9-48e2-974c-bd596cc3a01e"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GuidebookToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogue"",
            ""id"": ""5b6b2377-0126-480e-afa7-fa74d145346a"",
            ""actions"": [
                {
                    ""name"": ""NextSentence"",
                    ""type"": ""Button"",
                    ""id"": ""ba7cc3f3-3e01-40fd-82b7-2f0a58c1fdb8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""43b3073e-5456-4d09-9618-2685de2551be"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextSentence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Guidebook"",
            ""id"": ""6e66f7df-925c-47b0-8ee9-aa7195489756"",
            ""actions"": [
                {
                    ""name"": ""ChangePageLeft"",
                    ""type"": ""Button"",
                    ""id"": ""2527bb93-07d7-43a0-b779-f09cfb027ef2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangePageRight"",
                    ""type"": ""Button"",
                    ""id"": ""79b7697c-cde6-4223-9262-5e2eaae64b2c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7ad0e613-a2ba-4f24-b0d3-57670d49131e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePageLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e1448ba-3a43-4791-8b9e-ff7f5ade1f6b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePageRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Computer"",
            ""id"": ""e78e4f17-246c-4115-8ccc-6fb6703ab68a"",
            ""actions"": [
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""0ae32724-6d25-45e3-93bf-86c4d5056b46"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""b04a53df-860d-457e-a70b-01780bc009b0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""c8a9728f-435c-4ac1-b75e-5285ba0933df"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""a0fada47-ce97-467e-b38f-8a78811506d2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeComputerLeft"",
                    ""type"": ""Button"",
                    ""id"": ""9c3cc326-9ce5-47c3-9122-67898f93bbb8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeComputerRight"",
                    ""type"": ""Button"",
                    ""id"": ""14dda0ca-04b7-4e71-a486-856bcb55d217"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a31fc6a1-5db2-4c27-b45b-fc4248275547"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1ca9be9-0766-44d9-b556-6aeaedd293d3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63c13fc5-c85f-4f17-bb13-a659dbf4b771"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f8d7a09-5969-4470-9674-c5a4d8ac980b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeComputerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""055d29bc-53e8-402e-bed0-ad4005ecef99"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeComputerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""703e2517-2e27-4e8a-97e7-1b9ad2d8e24e"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CommandPrompt"",
            ""id"": ""e92ca324-be7b-435a-b7b1-d850e85f4422"",
            ""actions"": [
                {
                    ""name"": ""CommandSubmit"",
                    ""type"": ""Button"",
                    ""id"": ""7b6be9f5-8fed-4963-bc53-368e7f01d91f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""Value"",
                    ""id"": ""6e0c295e-c056-484c-9564-d2a33f627eee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""48996b9e-577b-4ea7-a7b4-9bd4be7abbb1"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CommandSubmit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86cc0bc6-f8b9-41d3-94cb-9e1473d47aa1"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CommandSubmit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cda96ac9-603e-4c49-a5e5-c7fa56eff7a1"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // All
        m_All = asset.FindActionMap("All", throwIfNotFound: true);
        m_All_Pause = m_All.FindAction("Pause", throwIfNotFound: true);
        // PlayerWalking
        m_PlayerWalking = asset.FindActionMap("PlayerWalking", throwIfNotFound: true);
        m_PlayerWalking_Move = m_PlayerWalking.FindAction("Move", throwIfNotFound: true);
        m_PlayerWalking_Rotate = m_PlayerWalking.FindAction("Rotate", throwIfNotFound: true);
        m_PlayerWalking_Interact = m_PlayerWalking.FindAction("Interact", throwIfNotFound: true);
        m_PlayerWalking_SmartphoneToggle = m_PlayerWalking.FindAction("SmartphoneToggle", throwIfNotFound: true);
        m_PlayerWalking_GuidebookToggle = m_PlayerWalking.FindAction("GuidebookToggle", throwIfNotFound: true);
        // Dialogue
        m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
        m_Dialogue_NextSentence = m_Dialogue.FindAction("NextSentence", throwIfNotFound: true);
        // Guidebook
        m_Guidebook = asset.FindActionMap("Guidebook", throwIfNotFound: true);
        m_Guidebook_ChangePageLeft = m_Guidebook.FindAction("ChangePageLeft", throwIfNotFound: true);
        m_Guidebook_ChangePageRight = m_Guidebook.FindAction("ChangePageRight", throwIfNotFound: true);
        // Computer
        m_Computer = asset.FindActionMap("Computer", throwIfNotFound: true);
        m_Computer_Exit = m_Computer.FindAction("Exit", throwIfNotFound: true);
        m_Computer_MouseDelta = m_Computer.FindAction("MouseDelta", throwIfNotFound: true);
        m_Computer_LeftClick = m_Computer.FindAction("LeftClick", throwIfNotFound: true);
        m_Computer_Return = m_Computer.FindAction("Return", throwIfNotFound: true);
        m_Computer_ChangeComputerLeft = m_Computer.FindAction("ChangeComputerLeft", throwIfNotFound: true);
        m_Computer_ChangeComputerRight = m_Computer.FindAction("ChangeComputerRight", throwIfNotFound: true);
        // CommandPrompt
        m_CommandPrompt = asset.FindActionMap("CommandPrompt", throwIfNotFound: true);
        m_CommandPrompt_CommandSubmit = m_CommandPrompt.FindAction("CommandSubmit", throwIfNotFound: true);
        m_CommandPrompt_MouseScroll = m_CommandPrompt.FindAction("MouseScroll", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_All.enabled, "This will cause a leak and performance issues, PlayerInputActions.All.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerWalking.enabled, "This will cause a leak and performance issues, PlayerInputActions.PlayerWalking.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Dialogue.enabled, "This will cause a leak and performance issues, PlayerInputActions.Dialogue.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Guidebook.enabled, "This will cause a leak and performance issues, PlayerInputActions.Guidebook.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Computer.enabled, "This will cause a leak and performance issues, PlayerInputActions.Computer.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_CommandPrompt.enabled, "This will cause a leak and performance issues, PlayerInputActions.CommandPrompt.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // All
    private readonly InputActionMap m_All;
    private List<IAllActions> m_AllActionsCallbackInterfaces = new List<IAllActions>();
    private readonly InputAction m_All_Pause;
    public struct AllActions
    {
        private @PlayerInputActions m_Wrapper;
        public AllActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_All_Pause;
        public InputActionMap Get() { return m_Wrapper.m_All; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AllActions set) { return set.Get(); }
        public void AddCallbacks(IAllActions instance)
        {
            if (instance == null || m_Wrapper.m_AllActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AllActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IAllActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IAllActions instance)
        {
            if (m_Wrapper.m_AllActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAllActions instance)
        {
            foreach (var item in m_Wrapper.m_AllActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AllActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AllActions @All => new AllActions(this);

    // PlayerWalking
    private readonly InputActionMap m_PlayerWalking;
    private List<IPlayerWalkingActions> m_PlayerWalkingActionsCallbackInterfaces = new List<IPlayerWalkingActions>();
    private readonly InputAction m_PlayerWalking_Move;
    private readonly InputAction m_PlayerWalking_Rotate;
    private readonly InputAction m_PlayerWalking_Interact;
    private readonly InputAction m_PlayerWalking_SmartphoneToggle;
    private readonly InputAction m_PlayerWalking_GuidebookToggle;
    public struct PlayerWalkingActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerWalkingActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerWalking_Move;
        public InputAction @Rotate => m_Wrapper.m_PlayerWalking_Rotate;
        public InputAction @Interact => m_Wrapper.m_PlayerWalking_Interact;
        public InputAction @SmartphoneToggle => m_Wrapper.m_PlayerWalking_SmartphoneToggle;
        public InputAction @GuidebookToggle => m_Wrapper.m_PlayerWalking_GuidebookToggle;
        public InputActionMap Get() { return m_Wrapper.m_PlayerWalking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerWalkingActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerWalkingActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerWalkingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerWalkingActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @SmartphoneToggle.started += instance.OnSmartphoneToggle;
            @SmartphoneToggle.performed += instance.OnSmartphoneToggle;
            @SmartphoneToggle.canceled += instance.OnSmartphoneToggle;
            @GuidebookToggle.started += instance.OnGuidebookToggle;
            @GuidebookToggle.performed += instance.OnGuidebookToggle;
            @GuidebookToggle.canceled += instance.OnGuidebookToggle;
        }

        private void UnregisterCallbacks(IPlayerWalkingActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @SmartphoneToggle.started -= instance.OnSmartphoneToggle;
            @SmartphoneToggle.performed -= instance.OnSmartphoneToggle;
            @SmartphoneToggle.canceled -= instance.OnSmartphoneToggle;
            @GuidebookToggle.started -= instance.OnGuidebookToggle;
            @GuidebookToggle.performed -= instance.OnGuidebookToggle;
            @GuidebookToggle.canceled -= instance.OnGuidebookToggle;
        }

        public void RemoveCallbacks(IPlayerWalkingActions instance)
        {
            if (m_Wrapper.m_PlayerWalkingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerWalkingActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerWalkingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerWalkingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerWalkingActions @PlayerWalking => new PlayerWalkingActions(this);

    // Dialogue
    private readonly InputActionMap m_Dialogue;
    private List<IDialogueActions> m_DialogueActionsCallbackInterfaces = new List<IDialogueActions>();
    private readonly InputAction m_Dialogue_NextSentence;
    public struct DialogueActions
    {
        private @PlayerInputActions m_Wrapper;
        public DialogueActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextSentence => m_Wrapper.m_Dialogue_NextSentence;
        public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
        public void AddCallbacks(IDialogueActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Add(instance);
            @NextSentence.started += instance.OnNextSentence;
            @NextSentence.performed += instance.OnNextSentence;
            @NextSentence.canceled += instance.OnNextSentence;
        }

        private void UnregisterCallbacks(IDialogueActions instance)
        {
            @NextSentence.started -= instance.OnNextSentence;
            @NextSentence.performed -= instance.OnNextSentence;
            @NextSentence.canceled -= instance.OnNextSentence;
        }

        public void RemoveCallbacks(IDialogueActions instance)
        {
            if (m_Wrapper.m_DialogueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogueActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogueActions @Dialogue => new DialogueActions(this);

    // Guidebook
    private readonly InputActionMap m_Guidebook;
    private List<IGuidebookActions> m_GuidebookActionsCallbackInterfaces = new List<IGuidebookActions>();
    private readonly InputAction m_Guidebook_ChangePageLeft;
    private readonly InputAction m_Guidebook_ChangePageRight;
    public struct GuidebookActions
    {
        private @PlayerInputActions m_Wrapper;
        public GuidebookActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangePageLeft => m_Wrapper.m_Guidebook_ChangePageLeft;
        public InputAction @ChangePageRight => m_Wrapper.m_Guidebook_ChangePageRight;
        public InputActionMap Get() { return m_Wrapper.m_Guidebook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GuidebookActions set) { return set.Get(); }
        public void AddCallbacks(IGuidebookActions instance)
        {
            if (instance == null || m_Wrapper.m_GuidebookActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GuidebookActionsCallbackInterfaces.Add(instance);
            @ChangePageLeft.started += instance.OnChangePageLeft;
            @ChangePageLeft.performed += instance.OnChangePageLeft;
            @ChangePageLeft.canceled += instance.OnChangePageLeft;
            @ChangePageRight.started += instance.OnChangePageRight;
            @ChangePageRight.performed += instance.OnChangePageRight;
            @ChangePageRight.canceled += instance.OnChangePageRight;
        }

        private void UnregisterCallbacks(IGuidebookActions instance)
        {
            @ChangePageLeft.started -= instance.OnChangePageLeft;
            @ChangePageLeft.performed -= instance.OnChangePageLeft;
            @ChangePageLeft.canceled -= instance.OnChangePageLeft;
            @ChangePageRight.started -= instance.OnChangePageRight;
            @ChangePageRight.performed -= instance.OnChangePageRight;
            @ChangePageRight.canceled -= instance.OnChangePageRight;
        }

        public void RemoveCallbacks(IGuidebookActions instance)
        {
            if (m_Wrapper.m_GuidebookActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGuidebookActions instance)
        {
            foreach (var item in m_Wrapper.m_GuidebookActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GuidebookActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GuidebookActions @Guidebook => new GuidebookActions(this);

    // Computer
    private readonly InputActionMap m_Computer;
    private List<IComputerActions> m_ComputerActionsCallbackInterfaces = new List<IComputerActions>();
    private readonly InputAction m_Computer_Exit;
    private readonly InputAction m_Computer_MouseDelta;
    private readonly InputAction m_Computer_LeftClick;
    private readonly InputAction m_Computer_Return;
    private readonly InputAction m_Computer_ChangeComputerLeft;
    private readonly InputAction m_Computer_ChangeComputerRight;
    public struct ComputerActions
    {
        private @PlayerInputActions m_Wrapper;
        public ComputerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Exit => m_Wrapper.m_Computer_Exit;
        public InputAction @MouseDelta => m_Wrapper.m_Computer_MouseDelta;
        public InputAction @LeftClick => m_Wrapper.m_Computer_LeftClick;
        public InputAction @Return => m_Wrapper.m_Computer_Return;
        public InputAction @ChangeComputerLeft => m_Wrapper.m_Computer_ChangeComputerLeft;
        public InputAction @ChangeComputerRight => m_Wrapper.m_Computer_ChangeComputerRight;
        public InputActionMap Get() { return m_Wrapper.m_Computer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ComputerActions set) { return set.Get(); }
        public void AddCallbacks(IComputerActions instance)
        {
            if (instance == null || m_Wrapper.m_ComputerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ComputerActionsCallbackInterfaces.Add(instance);
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
            @MouseDelta.started += instance.OnMouseDelta;
            @MouseDelta.performed += instance.OnMouseDelta;
            @MouseDelta.canceled += instance.OnMouseDelta;
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
            @Return.started += instance.OnReturn;
            @Return.performed += instance.OnReturn;
            @Return.canceled += instance.OnReturn;
            @ChangeComputerLeft.started += instance.OnChangeComputerLeft;
            @ChangeComputerLeft.performed += instance.OnChangeComputerLeft;
            @ChangeComputerLeft.canceled += instance.OnChangeComputerLeft;
            @ChangeComputerRight.started += instance.OnChangeComputerRight;
            @ChangeComputerRight.performed += instance.OnChangeComputerRight;
            @ChangeComputerRight.canceled += instance.OnChangeComputerRight;
        }

        private void UnregisterCallbacks(IComputerActions instance)
        {
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
            @MouseDelta.started -= instance.OnMouseDelta;
            @MouseDelta.performed -= instance.OnMouseDelta;
            @MouseDelta.canceled -= instance.OnMouseDelta;
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
            @Return.started -= instance.OnReturn;
            @Return.performed -= instance.OnReturn;
            @Return.canceled -= instance.OnReturn;
            @ChangeComputerLeft.started -= instance.OnChangeComputerLeft;
            @ChangeComputerLeft.performed -= instance.OnChangeComputerLeft;
            @ChangeComputerLeft.canceled -= instance.OnChangeComputerLeft;
            @ChangeComputerRight.started -= instance.OnChangeComputerRight;
            @ChangeComputerRight.performed -= instance.OnChangeComputerRight;
            @ChangeComputerRight.canceled -= instance.OnChangeComputerRight;
        }

        public void RemoveCallbacks(IComputerActions instance)
        {
            if (m_Wrapper.m_ComputerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IComputerActions instance)
        {
            foreach (var item in m_Wrapper.m_ComputerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ComputerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ComputerActions @Computer => new ComputerActions(this);

    // CommandPrompt
    private readonly InputActionMap m_CommandPrompt;
    private List<ICommandPromptActions> m_CommandPromptActionsCallbackInterfaces = new List<ICommandPromptActions>();
    private readonly InputAction m_CommandPrompt_CommandSubmit;
    private readonly InputAction m_CommandPrompt_MouseScroll;
    public struct CommandPromptActions
    {
        private @PlayerInputActions m_Wrapper;
        public CommandPromptActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CommandSubmit => m_Wrapper.m_CommandPrompt_CommandSubmit;
        public InputAction @MouseScroll => m_Wrapper.m_CommandPrompt_MouseScroll;
        public InputActionMap Get() { return m_Wrapper.m_CommandPrompt; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommandPromptActions set) { return set.Get(); }
        public void AddCallbacks(ICommandPromptActions instance)
        {
            if (instance == null || m_Wrapper.m_CommandPromptActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CommandPromptActionsCallbackInterfaces.Add(instance);
            @CommandSubmit.started += instance.OnCommandSubmit;
            @CommandSubmit.performed += instance.OnCommandSubmit;
            @CommandSubmit.canceled += instance.OnCommandSubmit;
            @MouseScroll.started += instance.OnMouseScroll;
            @MouseScroll.performed += instance.OnMouseScroll;
            @MouseScroll.canceled += instance.OnMouseScroll;
        }

        private void UnregisterCallbacks(ICommandPromptActions instance)
        {
            @CommandSubmit.started -= instance.OnCommandSubmit;
            @CommandSubmit.performed -= instance.OnCommandSubmit;
            @CommandSubmit.canceled -= instance.OnCommandSubmit;
            @MouseScroll.started -= instance.OnMouseScroll;
            @MouseScroll.performed -= instance.OnMouseScroll;
            @MouseScroll.canceled -= instance.OnMouseScroll;
        }

        public void RemoveCallbacks(ICommandPromptActions instance)
        {
            if (m_Wrapper.m_CommandPromptActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICommandPromptActions instance)
        {
            foreach (var item in m_Wrapper.m_CommandPromptActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CommandPromptActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CommandPromptActions @CommandPrompt => new CommandPromptActions(this);
    public interface IAllActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IPlayerWalkingActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnSmartphoneToggle(InputAction.CallbackContext context);
        void OnGuidebookToggle(InputAction.CallbackContext context);
    }
    public interface IDialogueActions
    {
        void OnNextSentence(InputAction.CallbackContext context);
    }
    public interface IGuidebookActions
    {
        void OnChangePageLeft(InputAction.CallbackContext context);
        void OnChangePageRight(InputAction.CallbackContext context);
    }
    public interface IComputerActions
    {
        void OnExit(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnReturn(InputAction.CallbackContext context);
        void OnChangeComputerLeft(InputAction.CallbackContext context);
        void OnChangeComputerRight(InputAction.CallbackContext context);
    }
    public interface ICommandPromptActions
    {
        void OnCommandSubmit(InputAction.CallbackContext context);
        void OnMouseScroll(InputAction.CallbackContext context);
    }
}
